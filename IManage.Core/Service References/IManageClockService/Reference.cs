//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IManage.Core.IManageClockService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClockInOut", Namespace="http://schemas.datacontract.org/2004/07/IManageService.BusinessLogic.Domain")]
    public partial class ClockInOut : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<System.DateTime> ClockInDateTimeField;
        
        private System.Nullable<System.DateTime> ClockOutDateTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ClockInDateTime {
            get {
                return this.ClockInDateTimeField;
            }
            set {
                if ((this.ClockInDateTimeField.Equals(value) != true)) {
                    this.ClockInDateTimeField = value;
                    this.RaisePropertyChanged("ClockInDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ClockOutDateTime {
            get {
                return this.ClockOutDateTimeField;
            }
            set {
                if ((this.ClockOutDateTimeField.Equals(value) != true)) {
                    this.ClockOutDateTimeField = value;
                    this.RaisePropertyChanged("ClockOutDateTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="IManageClockService.IClockService")]
    public interface IClockService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IClockService/ClockIn", ReplyAction="http://tempuri.org/IClockService/ClockInResponse")]
        System.IAsyncResult BeginClockIn(string employeePinCode, IManage.Core.IManageClockService.ClockInOut clockInOut, System.AsyncCallback callback, object asyncState);
        
        bool EndClockIn(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IClockService/ClockOut", ReplyAction="http://tempuri.org/IClockService/ClockOutResponse")]
        System.IAsyncResult BeginClockOut(string employeePinCode, System.DateTime clockOutDateTime, System.AsyncCallback callback, object asyncState);
        
        bool EndClockOut(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClockServiceChannel : IManage.Core.IManageClockService.IClockService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClockInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ClockInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClockOutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ClockOutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClockServiceClient : System.ServiceModel.ClientBase<IManage.Core.IManageClockService.IClockService>, IManage.Core.IManageClockService.IClockService {
        
        private BeginOperationDelegate onBeginClockInDelegate;
        
        private EndOperationDelegate onEndClockInDelegate;
        
        private System.Threading.SendOrPostCallback onClockInCompletedDelegate;
        
        private BeginOperationDelegate onBeginClockOutDelegate;
        
        private EndOperationDelegate onEndClockOutDelegate;
        
        private System.Threading.SendOrPostCallback onClockOutCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ClockServiceClient() : 
                base(ClockServiceClient.GetDefaultBinding(), ClockServiceClient.GetDefaultEndpointAddress()) {
        }
        
        public ClockServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ClockServiceClient.GetBindingForEndpoint(endpointConfiguration), ClockServiceClient.GetEndpointAddress(endpointConfiguration)) {
        }
        
        public ClockServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ClockServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
        }
        
        public ClockServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ClockServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
        }
        
        public ClockServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<ClockInCompletedEventArgs> ClockInCompleted;
        
        public event System.EventHandler<ClockOutCompletedEventArgs> ClockOutCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IManage.Core.IManageClockService.IClockService.BeginClockIn(string employeePinCode, IManage.Core.IManageClockService.ClockInOut clockInOut, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginClockIn(employeePinCode, clockInOut, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool IManage.Core.IManageClockService.IClockService.EndClockIn(System.IAsyncResult result) {
            return base.Channel.EndClockIn(result);
        }
        
        private System.IAsyncResult OnBeginClockIn(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string employeePinCode = ((string)(inValues[0]));
            IManage.Core.IManageClockService.ClockInOut clockInOut = ((IManage.Core.IManageClockService.ClockInOut)(inValues[1]));
            return ((IManage.Core.IManageClockService.IClockService)(this)).BeginClockIn(employeePinCode, clockInOut, callback, asyncState);
        }
        
        private object[] OnEndClockIn(System.IAsyncResult result) {
            bool retVal = ((IManage.Core.IManageClockService.IClockService)(this)).EndClockIn(result);
            return new object[] {
                    retVal};
        }
        
        private void OnClockInCompleted(object state) {
            if ((this.ClockInCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ClockInCompleted(this, new ClockInCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ClockInAsync(string employeePinCode, IManage.Core.IManageClockService.ClockInOut clockInOut) {
            this.ClockInAsync(employeePinCode, clockInOut, null);
        }
        
        public void ClockInAsync(string employeePinCode, IManage.Core.IManageClockService.ClockInOut clockInOut, object userState) {
            if ((this.onBeginClockInDelegate == null)) {
                this.onBeginClockInDelegate = new BeginOperationDelegate(this.OnBeginClockIn);
            }
            if ((this.onEndClockInDelegate == null)) {
                this.onEndClockInDelegate = new EndOperationDelegate(this.OnEndClockIn);
            }
            if ((this.onClockInCompletedDelegate == null)) {
                this.onClockInCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnClockInCompleted);
            }
            base.InvokeAsync(this.onBeginClockInDelegate, new object[] {
                        employeePinCode,
                        clockInOut}, this.onEndClockInDelegate, this.onClockInCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IManage.Core.IManageClockService.IClockService.BeginClockOut(string employeePinCode, System.DateTime clockOutDateTime, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginClockOut(employeePinCode, clockOutDateTime, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool IManage.Core.IManageClockService.IClockService.EndClockOut(System.IAsyncResult result) {
            return base.Channel.EndClockOut(result);
        }
        
        private System.IAsyncResult OnBeginClockOut(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string employeePinCode = ((string)(inValues[0]));
            System.DateTime clockOutDateTime = ((System.DateTime)(inValues[1]));
            return ((IManage.Core.IManageClockService.IClockService)(this)).BeginClockOut(employeePinCode, clockOutDateTime, callback, asyncState);
        }
        
        private object[] OnEndClockOut(System.IAsyncResult result) {
            bool retVal = ((IManage.Core.IManageClockService.IClockService)(this)).EndClockOut(result);
            return new object[] {
                    retVal};
        }
        
        private void OnClockOutCompleted(object state) {
            if ((this.ClockOutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ClockOutCompleted(this, new ClockOutCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ClockOutAsync(string employeePinCode, System.DateTime clockOutDateTime) {
            this.ClockOutAsync(employeePinCode, clockOutDateTime, null);
        }
        
        public void ClockOutAsync(string employeePinCode, System.DateTime clockOutDateTime, object userState) {
            if ((this.onBeginClockOutDelegate == null)) {
                this.onBeginClockOutDelegate = new BeginOperationDelegate(this.OnBeginClockOut);
            }
            if ((this.onEndClockOutDelegate == null)) {
                this.onEndClockOutDelegate = new EndOperationDelegate(this.OnEndClockOut);
            }
            if ((this.onClockOutCompletedDelegate == null)) {
                this.onClockOutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnClockOutCompleted);
            }
            base.InvokeAsync(this.onBeginClockOutDelegate, new object[] {
                        employeePinCode,
                        clockOutDateTime}, this.onEndClockOutDelegate, this.onClockOutCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override IManage.Core.IManageClockService.IClockService CreateChannel() {
            return new ClockServiceClientChannel(this);
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.ClockService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.ClockService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:8090/IManageService/Services/ClockService");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return ClockServiceClient.GetBindingForEndpoint(EndpointConfiguration.ClockService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return ClockServiceClient.GetEndpointAddress(EndpointConfiguration.ClockService);
        }
        
        private class ClockServiceClientChannel : ChannelBase<IManage.Core.IManageClockService.IClockService>, IManage.Core.IManageClockService.IClockService {
            
            public ClockServiceClientChannel(System.ServiceModel.ClientBase<IManage.Core.IManageClockService.IClockService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginClockIn(string employeePinCode, IManage.Core.IManageClockService.ClockInOut clockInOut, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = employeePinCode;
                _args[1] = clockInOut;
                System.IAsyncResult _result = base.BeginInvoke("ClockIn", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndClockIn(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("ClockIn", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginClockOut(string employeePinCode, System.DateTime clockOutDateTime, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = employeePinCode;
                _args[1] = clockOutDateTime;
                System.IAsyncResult _result = base.BeginInvoke("ClockOut", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndClockOut(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("ClockOut", _args, result)));
                return _result;
            }
        }
        
        public enum EndpointConfiguration {
            
            ClockService,
        }
    }
}
