//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IManage.Core.IManageStockService1 {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Item", Namespace="http://schemas.datacontract.org/2004/07/IManageService.BusinessLogic.Domain")]
    public partial class Item : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime AddedDateField;
        
        private System.Nullable<System.DateTime> DeletedDateField;
        
        private int IdField;
        
        private bool IsDeletedField;
        
        private string NameField;
        
        private double PriceField;
        
        private int QuantityField;
        
        private System.Nullable<System.DateTime> UpdateDateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime AddedDate {
            get {
                return this.AddedDateField;
            }
            set {
                if ((this.AddedDateField.Equals(value) != true)) {
                    this.AddedDateField = value;
                    this.RaisePropertyChanged("AddedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DeletedDate {
            get {
                return this.DeletedDateField;
            }
            set {
                if ((this.DeletedDateField.Equals(value) != true)) {
                    this.DeletedDateField = value;
                    this.RaisePropertyChanged("DeletedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeleted {
            get {
                return this.IsDeletedField;
            }
            set {
                if ((this.IsDeletedField.Equals(value) != true)) {
                    this.IsDeletedField = value;
                    this.RaisePropertyChanged("IsDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> UpdateDate {
            get {
                return this.UpdateDateField;
            }
            set {
                if ((this.UpdateDateField.Equals(value) != true)) {
                    this.UpdateDateField = value;
                    this.RaisePropertyChanged("UpdateDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="IManageStockService1.IStockService")]
    public interface IStockService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IStockService/AddItem", ReplyAction="http://tempuri.org/IStockService/AddItemResponse")]
        System.IAsyncResult BeginAddItem(string itemName, int quantity, double price, System.AsyncCallback callback, object asyncState);
        
        bool EndAddItem(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IStockService/UpdateItem", ReplyAction="http://tempuri.org/IStockService/UpdateItemResponse")]
        System.IAsyncResult BeginUpdateItem(IManage.Core.IManageStockService1.Item itemToBeUpdated, System.AsyncCallback callback, object asyncState);
        
        bool EndUpdateItem(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IStockService/DeleteItem", ReplyAction="http://tempuri.org/IStockService/DeleteItemResponse")]
        System.IAsyncResult BeginDeleteItem(IManage.Core.IManageStockService1.Item itemToBeDelete, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteItem(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IStockService/GetAllItems", ReplyAction="http://tempuri.org/IStockService/GetAllItemsResponse")]
        System.IAsyncResult BeginGetAllItems(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<IManage.Core.IManageStockService1.Item> EndGetAllItems(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStockServiceChannel : IManage.Core.IManageStockService1.IStockService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllItemsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllItemsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<IManage.Core.IManageStockService1.Item> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<IManage.Core.IManageStockService1.Item>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StockServiceClient : System.ServiceModel.ClientBase<IManage.Core.IManageStockService1.IStockService>, IManage.Core.IManageStockService1.IStockService {
        
        private BeginOperationDelegate onBeginAddItemDelegate;
        
        private EndOperationDelegate onEndAddItemDelegate;
        
        private System.Threading.SendOrPostCallback onAddItemCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateItemDelegate;
        
        private EndOperationDelegate onEndUpdateItemDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateItemCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteItemDelegate;
        
        private EndOperationDelegate onEndDeleteItemDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteItemCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllItemsDelegate;
        
        private EndOperationDelegate onEndGetAllItemsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllItemsCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public StockServiceClient() : 
                base(StockServiceClient.GetDefaultBinding(), StockServiceClient.GetDefaultEndpointAddress()) {
        }
        
        public StockServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(StockServiceClient.GetBindingForEndpoint(endpointConfiguration), StockServiceClient.GetEndpointAddress(endpointConfiguration)) {
        }
        
        public StockServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(StockServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
        }
        
        public StockServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(StockServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
        }
        
        public StockServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<AddItemCompletedEventArgs> AddItemCompleted;
        
        public event System.EventHandler<UpdateItemCompletedEventArgs> UpdateItemCompleted;
        
        public event System.EventHandler<DeleteItemCompletedEventArgs> DeleteItemCompleted;
        
        public event System.EventHandler<GetAllItemsCompletedEventArgs> GetAllItemsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IManage.Core.IManageStockService1.IStockService.BeginAddItem(string itemName, int quantity, double price, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddItem(itemName, quantity, price, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool IManage.Core.IManageStockService1.IStockService.EndAddItem(System.IAsyncResult result) {
            return base.Channel.EndAddItem(result);
        }
        
        private System.IAsyncResult OnBeginAddItem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string itemName = ((string)(inValues[0]));
            int quantity = ((int)(inValues[1]));
            double price = ((double)(inValues[2]));
            return ((IManage.Core.IManageStockService1.IStockService)(this)).BeginAddItem(itemName, quantity, price, callback, asyncState);
        }
        
        private object[] OnEndAddItem(System.IAsyncResult result) {
            bool retVal = ((IManage.Core.IManageStockService1.IStockService)(this)).EndAddItem(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddItemCompleted(object state) {
            if ((this.AddItemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddItemCompleted(this, new AddItemCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddItemAsync(string itemName, int quantity, double price) {
            this.AddItemAsync(itemName, quantity, price, null);
        }
        
        public void AddItemAsync(string itemName, int quantity, double price, object userState) {
            if ((this.onBeginAddItemDelegate == null)) {
                this.onBeginAddItemDelegate = new BeginOperationDelegate(this.OnBeginAddItem);
            }
            if ((this.onEndAddItemDelegate == null)) {
                this.onEndAddItemDelegate = new EndOperationDelegate(this.OnEndAddItem);
            }
            if ((this.onAddItemCompletedDelegate == null)) {
                this.onAddItemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddItemCompleted);
            }
            base.InvokeAsync(this.onBeginAddItemDelegate, new object[] {
                        itemName,
                        quantity,
                        price}, this.onEndAddItemDelegate, this.onAddItemCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IManage.Core.IManageStockService1.IStockService.BeginUpdateItem(IManage.Core.IManageStockService1.Item itemToBeUpdated, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateItem(itemToBeUpdated, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool IManage.Core.IManageStockService1.IStockService.EndUpdateItem(System.IAsyncResult result) {
            return base.Channel.EndUpdateItem(result);
        }
        
        private System.IAsyncResult OnBeginUpdateItem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            IManage.Core.IManageStockService1.Item itemToBeUpdated = ((IManage.Core.IManageStockService1.Item)(inValues[0]));
            return ((IManage.Core.IManageStockService1.IStockService)(this)).BeginUpdateItem(itemToBeUpdated, callback, asyncState);
        }
        
        private object[] OnEndUpdateItem(System.IAsyncResult result) {
            bool retVal = ((IManage.Core.IManageStockService1.IStockService)(this)).EndUpdateItem(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateItemCompleted(object state) {
            if ((this.UpdateItemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateItemCompleted(this, new UpdateItemCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateItemAsync(IManage.Core.IManageStockService1.Item itemToBeUpdated) {
            this.UpdateItemAsync(itemToBeUpdated, null);
        }
        
        public void UpdateItemAsync(IManage.Core.IManageStockService1.Item itemToBeUpdated, object userState) {
            if ((this.onBeginUpdateItemDelegate == null)) {
                this.onBeginUpdateItemDelegate = new BeginOperationDelegate(this.OnBeginUpdateItem);
            }
            if ((this.onEndUpdateItemDelegate == null)) {
                this.onEndUpdateItemDelegate = new EndOperationDelegate(this.OnEndUpdateItem);
            }
            if ((this.onUpdateItemCompletedDelegate == null)) {
                this.onUpdateItemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateItemCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateItemDelegate, new object[] {
                        itemToBeUpdated}, this.onEndUpdateItemDelegate, this.onUpdateItemCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IManage.Core.IManageStockService1.IStockService.BeginDeleteItem(IManage.Core.IManageStockService1.Item itemToBeDelete, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteItem(itemToBeDelete, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool IManage.Core.IManageStockService1.IStockService.EndDeleteItem(System.IAsyncResult result) {
            return base.Channel.EndDeleteItem(result);
        }
        
        private System.IAsyncResult OnBeginDeleteItem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            IManage.Core.IManageStockService1.Item itemToBeDelete = ((IManage.Core.IManageStockService1.Item)(inValues[0]));
            return ((IManage.Core.IManageStockService1.IStockService)(this)).BeginDeleteItem(itemToBeDelete, callback, asyncState);
        }
        
        private object[] OnEndDeleteItem(System.IAsyncResult result) {
            bool retVal = ((IManage.Core.IManageStockService1.IStockService)(this)).EndDeleteItem(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteItemCompleted(object state) {
            if ((this.DeleteItemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteItemCompleted(this, new DeleteItemCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteItemAsync(IManage.Core.IManageStockService1.Item itemToBeDelete) {
            this.DeleteItemAsync(itemToBeDelete, null);
        }
        
        public void DeleteItemAsync(IManage.Core.IManageStockService1.Item itemToBeDelete, object userState) {
            if ((this.onBeginDeleteItemDelegate == null)) {
                this.onBeginDeleteItemDelegate = new BeginOperationDelegate(this.OnBeginDeleteItem);
            }
            if ((this.onEndDeleteItemDelegate == null)) {
                this.onEndDeleteItemDelegate = new EndOperationDelegate(this.OnEndDeleteItem);
            }
            if ((this.onDeleteItemCompletedDelegate == null)) {
                this.onDeleteItemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteItemCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteItemDelegate, new object[] {
                        itemToBeDelete}, this.onEndDeleteItemDelegate, this.onDeleteItemCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IManage.Core.IManageStockService1.IStockService.BeginGetAllItems(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllItems(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<IManage.Core.IManageStockService1.Item> IManage.Core.IManageStockService1.IStockService.EndGetAllItems(System.IAsyncResult result) {
            return base.Channel.EndGetAllItems(result);
        }
        
        private System.IAsyncResult OnBeginGetAllItems(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((IManage.Core.IManageStockService1.IStockService)(this)).BeginGetAllItems(callback, asyncState);
        }
        
        private object[] OnEndGetAllItems(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<IManage.Core.IManageStockService1.Item> retVal = ((IManage.Core.IManageStockService1.IStockService)(this)).EndGetAllItems(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllItemsCompleted(object state) {
            if ((this.GetAllItemsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllItemsCompleted(this, new GetAllItemsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllItemsAsync() {
            this.GetAllItemsAsync(null);
        }
        
        public void GetAllItemsAsync(object userState) {
            if ((this.onBeginGetAllItemsDelegate == null)) {
                this.onBeginGetAllItemsDelegate = new BeginOperationDelegate(this.OnBeginGetAllItems);
            }
            if ((this.onEndGetAllItemsDelegate == null)) {
                this.onEndGetAllItemsDelegate = new EndOperationDelegate(this.OnEndGetAllItems);
            }
            if ((this.onGetAllItemsCompletedDelegate == null)) {
                this.onGetAllItemsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllItemsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllItemsDelegate, null, this.onEndGetAllItemsDelegate, this.onGetAllItemsCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override IManage.Core.IManageStockService1.IStockService CreateChannel() {
            return new StockServiceClientChannel(this);
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.ClockService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.ClockService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:8090/IManageService/Services/StockService");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return StockServiceClient.GetBindingForEndpoint(EndpointConfiguration.ClockService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return StockServiceClient.GetEndpointAddress(EndpointConfiguration.ClockService);
        }
        
        private class StockServiceClientChannel : ChannelBase<IManage.Core.IManageStockService1.IStockService>, IManage.Core.IManageStockService1.IStockService {
            
            public StockServiceClientChannel(System.ServiceModel.ClientBase<IManage.Core.IManageStockService1.IStockService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginAddItem(string itemName, int quantity, double price, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = itemName;
                _args[1] = quantity;
                _args[2] = price;
                System.IAsyncResult _result = base.BeginInvoke("AddItem", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddItem(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddItem", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateItem(IManage.Core.IManageStockService1.Item itemToBeUpdated, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = itemToBeUpdated;
                System.IAsyncResult _result = base.BeginInvoke("UpdateItem", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndUpdateItem(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("UpdateItem", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteItem(IManage.Core.IManageStockService1.Item itemToBeDelete, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = itemToBeDelete;
                System.IAsyncResult _result = base.BeginInvoke("DeleteItem", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndDeleteItem(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("DeleteItem", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllItems(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAllItems", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<IManage.Core.IManageStockService1.Item> EndGetAllItems(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<IManage.Core.IManageStockService1.Item> _result = ((System.Collections.ObjectModel.ObservableCollection<IManage.Core.IManageStockService1.Item>)(base.EndInvoke("GetAllItems", _args, result)));
                return _result;
            }
        }
        
        public enum EndpointConfiguration {
            
            ClockService,
        }
    }
}
